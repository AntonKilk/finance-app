@page "/transaction"

@using MyFinanceLibrary.Models
@using System.Text.Json;
@using System.Text;

<h1>Transactions</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Comment</th>
            <th>Amount</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var op in finOperations)
        {
            <tr>
                <td>@op.Date.ToString()</td>
                <td>@op.Comment</td>
                <td>@op.Amount</td>
               @* <td>
            <button class="btn btn-primary" @onclick="() => EditFinancialOperation(op)">Edit</button>
            <butn class="btn btn-primary" @onclick="() => DeleteFinancialOperation(op.ID)">Delete</button>
            </td>*@
            </tr>
        }
    </tbody>
</table>

<div>
    <h2>Add new transaction</h2>
    <form>
        <label>Date:</label>
        <input class="form-control" type="date" @bind-value="@newFinOperation.Date" />
        <br />
        <label>Comment:</label>
        <input class="form-control" type="text" @bind-value="@newFinOperation.Comment" />
        <br />
        <label>Amount:</label>
        <input class="form-control" type="number" step="0.01" @bind-value="@newFinOperation.Amount" />
        <br />
        <button class="btn btn-primary" @onclick="AddFinancialOperation">Add</button>
    </form>
</div>

@*<div>
    <h2>Edit Financial Operation</h2>
    <form>
        <label>Date:</label>
        <input class="form-control" type="date" @bind-value="@editFinancialOperation.Date" />
        <br />
        <label>Comment:</label>
        <input class="form-control" type="text" @bind-value="@editFinancialOperation.Comment" />
        <br />
        <label>Amount:</label>
        <input class="form-control" type="number" step="0.01" @bind-value="@editFinancialOperation.Amount" />
        <br />
        <button class="btn btn-primary" @onclick="UpdateFinancialOperation">Save</button>
        <button class="btn btn-primary" @onclick="CancelEditFinancialOperation">Cancel</button>
    </form>
</div>*@

@code {
    List<FinancialOperation> finOperations = new List<FinancialOperation>();
    HttpClient client = new HttpClient();
    FinancialOperation? newFinOperation = new FinancialOperation();
    //FinancialOperation editFinancialOperation = new FinancialOperation();

    protected override async Task OnInitializedAsync()
    {
        finOperations = await FetchFinancialOperationsAsync();
    }

    private async Task<List<FinancialOperation>> FetchFinancialOperationsAsync()
    {
        var response = await client.GetAsync("https://localhost:7295/FinancialOperation");

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
            return System.Text.Json.JsonSerializer.Deserialize<List<FinancialOperation>>(jsonString, options);
        }

        return null;
    }

    async Task AddFinancialOperation()
    {
        finOperations = await FetchFinancialOperationsAsync();
        var json = JsonSerializer.Serialize(newFinOperation);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("https://localhost:7295/FinancialOperation", content);

        if (response.IsSuccessStatusCode)
        {
            finOperations = await FetchFinancialOperationsAsync();
        }
        else
        {
            var errorMessage = $"Failed to fetch financial operations. Status code: {response.StatusCode}";
            throw new Exception(errorMessage);
        }
    }

    //void EditFinancialOperation(FinancialOperation op)
    //{
    //    editFinancialOperation = op;
    //}

    //async Task UpdateFinancialOperation()
    //{
    //    int id = editFinancialOperation.ID;
    //    await _service.UpdateFinancialOperation(id, editFinancialOperation);
    //    financialOperations = await _service.GetFinancialOperations();
    //    editFinancialOperation = null;
    //}

    //void CancelEditFinancialOperation()
    //{
    //    editFinancialOperation = null;
    //}

    //async Task DeleteFinancialOperation(int id)
    //{
    //    var operationToDelete = financialOperations.FirstOrDefault(op => op.ID == id);
    //    if (operationToDelete != null)
    //    {
    //        await _service.DeleteFinancialOperation(id);
    //        financialOperations = await _service.GetFinancialOperations();
    //    }
    //}


}
